# -*- coding: utf-8 -*-
"""Copy of Drought_propagation.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1PCwMNBAErhbUbHOhsutkvZFw4-0QzYDl

### SPI estimation code to assess drought in Godavari Basin

SPI stands for Standardized Precipitation Index which assesses how much a precipitation value deviates from a normal condition.
"""

!pip install fitter

import os
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
import datetime
import statistics
from fitter import get_distributions
from scipy import stats
from scipy.stats import norm
from scipy.stats import gamma

"""### SPI estimation function"""

# import numpy as np
# from scipy import stats

# def SSI_value(discharge_data, date_list):

#     # Calculate average daily discharge and standard deviation
#     avg_discharge = np.mean(discharge_data)
#     std_discharge = np.std(discharge_data)

#     # Calculate SSI values for each month of the record
#     SSI_values = []
#     for i in range(12):
#         start_idx = i * 30  # Assuming 30 days per month
#         end_idx = start_idx + 30
#         month_discharge = discharge_data[start_idx:end_idx]
#         month_avg_discharge = np.mean(month_discharge)
#         month_std_discharge = np.std(month_discharge)
#         SSI_value = (month_avg_discharge - avg_discharge) / std_discharge
#         SSI_values.append((date_list[i], SSI_value))

#     # Convert the results to a pandas DataFrame and sort by date
#     ssi_df = pd.DataFrame(SSI_values, columns=['Date', 'SSI'])
#     ssi_df = ssi_df.sort_values(by='Date')

#     return ssi_df

Precipitation_raw= pd.read_excel("/content/WRE_PRO_2.xlsx")

#column names

col_names = Precipitation_raw.columns
# print(col_names)
# print(Precipitation_raw.loc[:,col_names[4]])
#check length of the data

length = len(Precipitation_raw.loc[:,col_names[4]])
# print(length)

# Missing values removed

Precipitation_raw.dropna(subset=[col_names[4]],inplace=True)

Precipitation = Precipitation_raw.reset_index(drop=True)

# length after the missing values are removed

length2 = len(Precipitation.loc[:,col_names[4]])
# print(Precipitation.loc[:,col_names[4]])
print(Precipitation)

for k in range(0,len(Precipitation.loc[:,col_names[3]])):

    Precipitation.loc[k,col_names[3]] = datetime.datetime.strptime(Precipitation.loc[k,col_names[3]], '%d/%m/%Y')
# print(Precipitation)

# monthly sum
Precipitation1 = pd.DataFrame(Precipitation.resample('M', on=col_names[3]).sum())

Precipitation1 = Precipitation1.reset_index(drop=True)
Precipitation1

# import pandas as pd

# Create a new DataFrame with a datetime index
df_new = Precipitation_raw.copy()
df_new['Date'] = pd.to_datetime(df_new['dmy'], format='%d/%m/%Y')
df_new.set_index('Date', inplace=True)

# Set the start date to the first day of January 1987
start_date = pd.to_datetime('1-1-1987', format='%d-%m-%Y')

# Set the end date to the last day of the month in the last row of the DataFrame
end_date = df_new.index.max().replace(day=1) + pd.offsets.MonthEnd()

# Create a monthly date range from start_date to end_date
monthly_dates = pd.date_range(start=start_date, end=end_date, freq='MS')
# print(monthly_dates)
# Create a sample DataFrame with timestamps
monthly_dates1 = pd.DataFrame({'date': monthly_dates})

# Convert the date column to a Pandas Timestamp object
monthly_dates1['date'] = pd.to_datetime(monthly_dates1['date'])

# Convert the date format to dd-mm-yyyy
monthly_dates1['date'] = monthly_dates1['date'].apply(lambda x: x.strftime('%d/%m/%Y'))

# Print the updated DataFrame
print(monthly_dates1)

# dates= pd.DataFrame(monthly_dates)
# dates
# monthly_dates.shape

Precipitation1['dmy']=monthly_dates1['date']

# starting_date = Precipitation_raw.loc[3,col_names[3]][3:]

# ending_date = Precipitation_raw.loc[len(Precipitation.loc[:,col_names[4]])-1,col_names[4]][3:]

# ending_date1 = int(ending_date[0:2])+1

# ending_date = '0' + str(ending_date1) + ending_date[2:]

# date_list = [i.strftime("%m-%Y") for i in pd.date_range(start=starting_date, end=ending_date, freq='M')]

col_names1 = Precipitation1.columns
col_names1[3]

print(Precipitation1)

import pandas as pd
import numpy as np

# Load the dataset
df = pd.read_excel("/content/WRE_PRO_2.xlsx")

# Convert the 'dmy' column to a datetime object
df['dmy'] = pd.to_datetime(df['dmy'], format='%d/%m/%Y')

# Compute the mean daily discharge for each month of the year
monthly_means = df.groupby(['Month'])['Discharge'].mean()

# Compute the standard deviation of daily discharge for each month of the year
monthly_stdevs = df.groupby(['Month'])['Discharge'].std()

# Compute the departure from the mean discharge for each daily observation
df['Departure'] = df.groupby(['Month'])['Discharge'].apply(lambda x: x - monthly_means[x.name])

# Compute the standardized departure for each daily observation
df['Standardized Departure'] = df.apply(lambda x: x['Departure'] / monthly_stdevs[x['Month']], axis=1)

# Compute the mean of the standardized departures for each month of the year
ssfi_values = df.groupby(['Month'])['Standardized Departure'].mean()

print(ssfi_values)

import pandas as pd
import numpy as np

# Load the dataset
df = pd.read_excel("/content/WRE_PRO_2.xlsx")

# Convert the 'dmy' column to a datetime object
df['dmy'] = pd.to_datetime(df['dmy'], format='%d/%m/%Y')

# Compute the mean daily discharge for each month of the year
monthly_means = df.groupby(['Month'])['Discharge'].mean()

# Compute the standard deviation of daily discharge for each month of the year
monthly_stdevs = df.groupby(['Month'])['Discharge'].std()

# Compute the departure from the mean discharge for each daily observation
df['Departure'] = df.groupby(['Month'])['Discharge'].apply(lambda x: x - monthly_means[x.name])

# Compute the standardized departure for each daily observation
df['Standardized Departure'] = df.apply(lambda x: x['Departure'] / monthly_stdevs[x['Month']], axis=1)

# Compute the mean of the standardized departures for each month of the year
ssfi_values = df.groupby(['Month'])['Standardized Departure'].mean()
print(ssfi_values)

import matplotlib.pyplot as plt

x_values = [1,2,3,4,5,6,7,8,9,10,11,12]
y_values = ssfi_values

colors = ['blue' if val > 0 else 'red' for val in y_values]

plt.bar(x_values, y_values, color=colors)
plt.xlabel('Months')
plt.ylabel('SSI')
plt.title('SSI RESULT')
plt.legend()
plt.show()

# discharge_data = pd.read_excel("/content/WRE_PRO_2.xlsx")
SSI_per_accumulation = []
# Calculate daily sediment discharge
sediment_discharge = Precipitation1['Discharge'] * 50

# Calculate cumulative sediment discharge
cumulative_sediment_discharge = np.cumsum(sediment_discharge)

# Calculate SSI value for the given time period
for s in range(0,len(Precipitation1.loc[:,'Discharge'])-1):
  start_date = Precipitation1.loc[s,'dmy']
  end_date = Precipitation1.loc[s+1,'dmy']
  period_sediment_discharge = cumulative_sediment_discharge[(Precipitation1['dmy'] >= start_date) & (Precipitation1['dmy'] <= end_date)]
  total_sediment_discharge = period_sediment_discharge.iloc[::]
  average_discharge = Precipitation1[(Precipitation1['dmy'] >= start_date) & (Precipitation1['dmy'] <= end_date)]['Discharge'].mean()
  ssi_value = period_sediment_discharge.iloc[:] / (30 * average_discharge)
  SSI_per_accumulation.append(ssi_value)

SSI_per_accumulation

"""### Create monthly date from 01/1951 till end of the data

### Estimating SPI values for each accumulation period
"""

acc= [3,6,9,12,24]

SPI_per_accumulation = []

for e in acc:

        WB_acc = pd.DataFrame(Precipitation1.loc[:,col_names1[3]].rolling(e).sum())
        # print(WB_acc) # accumulation
        dates= pd.DataFrame(monthly_dates1)

        dates['P']=WB_acc.loc[:,col_names1[3]]
        # print(dates)
        dates.dropna(inplace=True)
        WB_acc = pd.DataFrame(dates)

        WB_acc=WB_acc.reset_index(drop=True)

        WB_acc = WB_acc.rename({'date': 'Date'}, axis=1)

        dates= pd.DataFrame(WB_acc.loc[:,'Date'])

        # scaling the data so that it can be fitted easily
        sd=statistics.stdev(WB_acc.loc[:,'P'])
        WB_acc = WB_acc.loc[:,'P']/sd
        #
        #WB_acc = WB_acc.loc[:,'WB']/max(WB_acc.loc[:,'WB'])

        dates['P']=WB_acc
        WB_acc = pd.DataFrame(dates)
        # print(WB_acc)
        J=[]
        F=[]
        M=[]
        A=[]
        Ma=[]
        Ju=[]
        Jul=[]
        Au=[]
        S=[]
        O=[]
        N=[]
        D=[]

        Dates =[[],[],[],[],[],[],[],[],[],[],[],[]]

        for s in range(0,len(WB_acc.loc[:,'P'])):
            if WB_acc.loc[s,'Date'][:2]=="01":
                J.append(WB_acc.loc[s,'P'])
                Dates[0].append(WB_acc.loc[s,'Date'])
            elif  WB_acc.loc[s,'Date'][:2]=="02":
                F.append(WB_acc.loc[s,'P'])
                Dates[1].append(WB_acc.loc[s,'Date'])
            elif  WB_acc.loc[s,'Date'][:2]=="03":
                M.append(WB_acc.loc[s,'P'])
                Dates[2].append(WB_acc.loc[s,'Date'])
            elif  WB_acc.loc[s,'Date'][:2]=="04":
                A.append(WB_acc.loc[s,'P'])
                Dates[3].append(WB_acc.loc[s,'Date'])
            elif  WB_acc.loc[s,'Date'][:2]=="05":
                Ma.append(WB_acc.loc[s,'P'])
                Dates[4].append(WB_acc.loc[s,'Date'])
            elif  WB_acc.loc[s,'Date'][:2]=="06":
                Ju.append(WB_acc.loc[s,'P'])
                Dates[5].append(WB_acc.loc[s,'Date'])
            elif  WB_acc.loc[s,'Date'][:2]=="07":
                Jul.append(WB_acc.loc[s,'P'])
                Dates[6].append(WB_acc.loc[s,'Date'])
            elif  WB_acc.loc[s,'Date'][:2]=="08":
                Au.append(WB_acc.loc[s,'P'])
                Dates[7].append(WB_acc.loc[s,'Date'])
            elif  WB_acc.loc[s,'Date'][:2]=="09":
                S.append(WB_acc.loc[s,'P'])
                Dates[8].append(WB_acc.loc[s,'Date'])
            elif  WB_acc.loc[s,'Date'][:2]=="10":
                O.append(WB_acc.loc[s,'P'])
                Dates[9].append(WB_acc.loc[s,'Date'])
            elif  WB_acc.loc[s,'Date'][:2]=="11":
                N.append(WB_acc.loc[s,'P'])
                Dates[10].append(WB_acc.loc[s,'Date'])
            elif  WB_acc.loc[s,'Date'][:2]=="12":
                D.append(WB_acc.loc[s,'P'])
                Dates[11].append(WB_acc.loc[s,'Date'])
            else:
                pass

        mon=[J,F,M,A,Ma,Ju,Jul,Au,S,O,N,D]

        # using the function, lets calculate the SPI values
        # print(Dates)
        # print(mon)
        SPI_Jordan = SSI_value(J,Dates)
        print(SPI_Jordan)

        # print(SPI_Jordan)
        # We need to sort them as they are not sorted
        # for k in range(0,len(SPI_Jordan.loc[:,'Date'])):

        #     SPI_Jordan.loc[k,'Date2'] = datetime.datetime.strptime(SPI_Jordan.loc[k,'Date'], '%m-%Y')


        # SPI_Jordan2 = SPI_Jordan.sort_values("Date2")

        # delete the extra column called Date2
        # del SPI_Jordan2["Date2"]

        # Restet index
        # SPI_Jordan = SPI_Jordan.reset_index(drop=True)

        col_name3 = SPI_Jordan.columns

        # if the extreme values pass -3 or 3 , we assign value of -3 and 3, respectively

        for s in range(0,len(SPI_Jordan.loc[:col_name3[1]])-1):

            if SPI_Jordan.loc[s,col_name3[1]]<-3:

                SPI_Jordan.loc[s,col_name3[1]] = -3

            elif SPI_Jordan.loc[s,col_name3[1]] > 3:

                SPI_Jordan.loc[s,col_name3[1]] = 3

            else:
                pass

        SPI_per_accumulation.append(SPI_Jordan)
SPI_per_accumulation

"""#### Plot for 3-month accumulation"""

# Commented out IPython magic to ensure Python compatibility.

# %matplotlib inline

SPI_Jordan2 = SPI_per_accumulation[0]

plt.figure(figsize=(25,8),dpi=300)
plt.plot(SPI_Jordan2.loc[:,'Date'],SPI_Jordan2.loc[:,'SPI'],'k',markersize=14,linewidth=3,label='SPI')

plt.rcParams.update({'font.size': 20})
plt.xticks(fontsize=20,fontweight='bold')
plt.yticks(fontsize=20,fontweight='bold')
plt.ylabel('SPI [-]',fontsize=20,fontweight='bold')
plt.xlabel('Date',fontsize=20,fontweight='bold')
plt.axhline(y=0,color='k')
plt.axhline(y=-1,color='k',linestyle='dashed',linewidth=3,label='Moderately dry')
plt.axhline(y=-2,color='m',linestyle='dashed',linewidth=3,label='Severly dry')


for k in range(0,len(SPI_Jordan2.loc[:,'SPI'])):
    if   SPI_Jordan2.loc[k,'SPI']>0:
        c='lightblue'
    else:
        c='red'

    plt.fill_between([SPI_Jordan2.loc[k,'Date'],SPI_Jordan2.loc[k,'Date']],[SPI_Jordan2.loc[k,'SPI'], SPI_Jordan2.loc[k,'SPI']],color=c)


legend_properties = {'weight':'bold','size': 20}
plt.legend(prop=legend_properties,loc='best',ncol=3)

plt.gca().xaxis.set_major_locator(plt.MultipleLocator(60))

plt.title('%s-month'%3,fontsize=20,fontweight='bold')

"""#### Plot for 6-month accumulation"""

SPI_Jordan2 = SPI_per_accumulation[1]

plt.figure(figsize=(25,8),dpi=300)
plt.plot(SPI_Jordan2.loc[:,'Date'],SPI_Jordan2.loc[:,'SPI'],'k',markersize=14,linewidth=3,label='SPI')

plt.rcParams.update({'font.size': 20})
plt.xticks(fontsize=20,fontweight='bold')
plt.yticks(fontsize=20,fontweight='bold')
plt.ylabel('SPI [-]',fontsize=20,fontweight='bold')
plt.xlabel('Date',fontsize=20,fontweight='bold')
plt.axhline(y=0,color='k')
plt.axhline(y=-1,color='k',linestyle='dashed',linewidth=3,label='Moderately dry')
plt.axhline(y=-2,color='m',linestyle='dashed',linewidth=3,label='Severly dry')


for k in range(0,len(SPI_Jordan2.loc[:,'SPI'])):
    if   SPI_Jordan2.loc[k,'SPI']>0:
        c='lightblue'
    else:
        c='red'

    plt.fill_between([SPI_Jordan2.loc[k,'Date'],SPI_Jordan2.loc[k,'Date']],[SPI_Jordan2.loc[k,'SPI'], SPI_Jordan2.loc[k,'SPI']],color=c)


legend_properties = {'weight':'bold','size': 20}
plt.legend(prop=legend_properties,loc='best',ncol=3)

plt.gca().xaxis.set_major_locator(plt.MultipleLocator(60))

plt.title('%s-month'%6,fontsize=20,fontweight='bold')

"""#### Plot for 9-month accumulation"""

SPI_Jordan2 = SPI_per_accumulation[2]

plt.figure(figsize=(25,8),dpi=300)
plt.plot(SPI_Jordan2.loc[:,'Date'],SPI_Jordan2.loc[:,'SPI'],'k',markersize=14,linewidth=3,label='SPI')

plt.rcParams.update({'font.size': 20})
plt.xticks(fontsize=20,fontweight='bold')
plt.yticks(fontsize=20,fontweight='bold')
plt.ylabel('SPI [-]',fontsize=20,fontweight='bold')
plt.xlabel('Date',fontsize=20,fontweight='bold')
plt.axhline(y=0,color='k')
plt.axhline(y=-1,color='k',linestyle='dashed',linewidth=3,label='Moderately dry')
plt.axhline(y=-2,color='m',linestyle='dashed',linewidth=3,label='Severly dry')


for k in range(0,len(SPI_Jordan2.loc[:,'SPI'])):
    if   SPI_Jordan2.loc[k,'SPI']>0:
        c='lightblue'
    else:
        c='red'

    plt.fill_between([SPI_Jordan2.loc[k,'Date'],SPI_Jordan2.loc[k,'Date']],[SPI_Jordan2.loc[k,'SPI'], SPI_Jordan2.loc[k,'SPI']],color=c)


legend_properties = {'weight':'bold','size': 20}
plt.legend(prop=legend_properties,loc='best',ncol=3)

plt.gca().xaxis.set_major_locator(plt.MultipleLocator(60))

plt.title('%s-month'%9,fontsize=20,fontweight='bold')

"""#### Plot for 12-month accumulation"""

SPI_Jordan2 = SPI_per_accumulation[3]

plt.figure(figsize=(25,8),dpi=300)
plt.plot(SPI_Jordan2.loc[:,'Date'],SPI_Jordan2.loc[:,'SPI'],'k',markersize=14,linewidth=3,label='SPI')

plt.rcParams.update({'font.size': 20})
plt.xticks(fontsize=20,fontweight='bold')
plt.yticks(fontsize=20,fontweight='bold')
plt.ylabel('SPI [-]',fontsize=20,fontweight='bold')
plt.xlabel('Date',fontsize=20,fontweight='bold')
plt.axhline(y=0,color='k')
plt.axhline(y=-1,color='k',linestyle='dashed',linewidth=3,label='Moderately dry')
plt.axhline(y=-2,color='m',linestyle='dashed',linewidth=3,label='Severly dry')


for k in range(0,len(SPI_Jordan2.loc[:,'SPI'])):
    if   SPI_Jordan2.loc[k,'SPI']>0:
        c='lightblue'
    else:
        c='red'

    plt.fill_between([SPI_Jordan2.loc[k,'Date'],SPI_Jordan2.loc[k,'Date']],[SPI_Jordan2.loc[k,'SPI'], SPI_Jordan2.loc[k,'SPI']],color=c)


legend_properties = {'weight':'bold','size': 20}
plt.legend(prop=legend_properties,loc='best',ncol=3)

plt.gca().xaxis.set_major_locator(plt.MultipleLocator(60))

plt.title('%s-month'%12,fontsize=20,fontweight='bold')

"""#### Plot for 24-month accumulation"""

SPI_Jordan2 = SPI_per_accumulation[4]

plt.figure(figsize=(25,8),dpi=300)
plt.plot(SPI_Jordan2.loc[:,'Date'],SPI_Jordan2.loc[:,'SPI'],'k',markersize=14,linewidth=3,label='SPI')

plt.rcParams.update({'font.size': 20})
plt.xticks(fontsize=20,fontweight='bold')
plt.yticks(fontsize=20,fontweight='bold')
plt.ylabel('SPI [-]',fontsize=20,fontweight='bold')
plt.xlabel('Date',fontsize=20,fontweight='bold')
plt.axhline(y=0,color='k')
plt.axhline(y=-1,color='k',linestyle='dashed',linewidth=3,label='Moderately dry')
plt.axhline(y=-2,color='m',linestyle='dashed',linewidth=3,label='Severly dry')


for k in range(0,len(SPI_Jordan2.loc[:,'SPI'])):
    if   SPI_Jordan2.loc[k,'SPI']>0:
        c='lightblue'
    else:
        c='red'

    plt.fill_between([SPI_Jordan2.loc[k,'Date'],SPI_Jordan2.loc[k,'Date']],[SPI_Jordan2.loc[k,'SPI'], SPI_Jordan2.loc[k,'SPI']],color=c)


legend_properties = {'weight':'bold','size': 20}
plt.legend(prop=legend_properties,loc='best',ncol=3)

plt.gca().xaxis.set_major_locator(plt.MultipleLocator(60))

plt.title('%s-month'%24,fontsize=20,fontweight='bold')